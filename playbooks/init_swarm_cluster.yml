---
- hosts: managers,workers
  become: yes
  become_user: root
  tasks:
    - name: Ensure json file exists
      copy:
        content: "{}"
        dest: /etc/docker/daemon.json
        force: false

  
    - name: append more key/values
      set_fact:
        docker_vars: "{{ docker_vars | default([]) | combine({ item.key : item.value }) }}"
      with_items:
      - { key: "log-driver", value: "json-file" }
      - { key: "log-opts", value: { max-size: "10m", max-file: "3"} }
      - { key: "metrics-addr", value: "0.0.0.0:9323" }
      - { key: "experimental", value: true }

    - debug:
        var: docker_vars

    - name: write var to file
      copy:
        content: "{{ docker_vars | to_nice_json }}"
        dest: /etc/docker/daemon.json

    - name: Restart service docker daemon
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: docker


# lecture de l'Ã©tat du swarm sur le noeud du cluster
- hosts: managers, workers
  tasks:
    - name: Log into private registry and force re-authorization
      community.docker.docker_login:
        registry_url: "{{ private_registry.host }}"
        username: "{{ private_registry.login }}"
        password: "{{ private_registry.token }}"
        reauthorize: yes


- hosts: managers, workers
  become: yes
  become_user: root
  tasks:
    - name: Check if Swarm Mode is already activated
      command: docker info
      register: docker_info
      changed_when: false

# Initialisation du cluster sur le manageur principal
- hosts: managers[0]
  become: yes
  tasks:
    - name: Starting primary swarm manager
      shell: >
        docker swarm init --advertise-addr {{ vagrant_primary_manager_ip }}
      register: init_result
      when: '"Swarm: active" not in docker_info.stdout'

    - debug: var=init_result

    - name: Retrieve manager token
      shell: >
        docker swarm join-token manager --quiet
      register: manager_token_result

    - name: Retrieve worker token
      shell: >
        docker swarm join-token worker --quiet
      register: worker_token_result

    - set_fact:
        worker_token: "{{ worker_token_result.stdout }}"
        primary_manager_ip: "{{ vagrant_primary_manager_ip }}"
        manager_token: "{{ manager_token_result.stdout }}"

    - debug: var=worker_token
    - debug: var=primary_manager_ip


# rejoindre le cluser pour les machines workers
- hosts: workers, managers[1:]
  tasks:
    - name: Starting swarm workers to join cluster
      shell: >
        docker swarm join \
          --token {{ hostvars[manager_primary]['worker_token']  }} \
          {{  hostvars[manager_primary]['primary_manager_ip'] }}:{{ swarm_bind_port }}
      register: init_result
      when: '"Swarm: active" not in docker_info.stdout'

# rejoindre le cluser pour les machines manager
- hosts: managers[0]
  tasks:
    - name: Starting secondary swarm managers to join cluster
      shell: >
        docker node join \
          --token {{ hostvars[manager_primary]['manager_token']  }} \
          {{ hostvars[manager_primary]['primary_manager_ip'] }}:{{ swarm_bind_port }}
      register: init_result
      when: '"Swarm: active" in docker_info.stdout'

# Labellisation des noeuds
- hosts: managers, workers
  serial: 1
  become: yes
  become_user: root
  tasks:
    - name: Label nodes
      shell: >
        docker node update --label-add {{ item }}=true {{ inventory_hostname }}
      when: "item != 'all_groups'"
      with_items:
        - "{{ group_names }}"
      delegate_to: "{{ groups['managers'][0] }}"
      tags:
        - label

#lecture de l'etat du cluster
- hosts: managers[0]
  become: yes
  become_user: root
  tasks:
    - name: Examine the swarm
      shell: >
        curl --unix-socket /var/run/docker.sock http://localhost/info | sed -n -e "/^{/p"| python -m json.tool
      register: docker_swarm_result
      no_log: true

    - set_fact:
        docker_swarm_info: "{{ docker_swarm_result.stdout | from_json }}"

    - debug: var=docker_swarm_info.Swarm


# create overlay networks for infra swarm nodes
- hosts: managers[0]
  become: yes
  become_user: root
  tasks:

    - name: Create overlay networks
      community.docker.docker_network:
        driver: overlay
        attachable: true
        name:  core-infra
        state: present