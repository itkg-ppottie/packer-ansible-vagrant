---
- include: config_docker_daemon.yml
  when: world == "vm-local"

# lecture de l'Ã©tat du swarm sur le noeud du cluster
- hosts: managers, workers
  tasks:
    - name: Log into private registry and force re-authorization
      community.docker.docker_login:
        registry_url: "{{ private_registry.host }}"
        username: "{{ private_registry.login }}"
        password: "{{ private_registry.token }}"
        reauthorize: yes

- hosts: managers, workers
  tasks:
    - name: Check if Swarm Mode is already activated
      command: docker info
      register: docker_info
      changed_when: false

# Initialisation du cluster sur le manageur principal
- hosts: managers[0]
  tasks:
    - name: Starting primary swarm manager
      shell: >
        docker swarm init --advertise-addr {{ vagrant_primary_manager_ip  | default(ansible_default_ipv4.address) }}
      register: init_result
      when: '"Swarm: active" not in docker_info.stdout'

    - debug: var=init_result

    - name: Retrieve manager token
      shell: >
        docker swarm join-token manager --quiet
      register: manager_token_result

    - name: Retrieve worker token
      shell: >
        docker swarm join-token worker --quiet
      register: worker_token_result

    - set_fact:
        worker_token: "{{ worker_token_result.stdout }}"
        primary_manager_ip: "{{ vagrant_primary_manager_ip | default(ansible_default_ipv4.address) }}"
        manager_token: "{{ manager_token_result.stdout }}"

    - debug: var=worker_token
    - debug: var=primary_manager_ip


# rejoindre le cluser pour les machines workers
- hosts: workers
  tasks:
    - name: Starting swarm workers to join cluster
      shell: >
        docker swarm join \
          --token {{ hostvars[groups['managers'][0]]['worker_token']  }} \
          {{  hostvars[groups['managers'][0]]['primary_manager_ip'] }}:{{ swarm_bind_port | default('2377')}}
      register: init_result
      when: '"Swarm: active" not in docker_info.stdout'

# rejoindre le cluser pour les machines manager
- hosts: managers[1:]
  tasks:
    - name: Starting secondary swarm managers to join cluster
      shell: >
        docker swarm join \
          --token {{ hostvars[groups['managers'][0]]['manager_token']  }} \
          {{ hostvars[groups['managers'][0]]['primary_manager_ip'] }}:{{ swarm_bind_port | default('2377')}}
      register: init_result
      when: '"Swarm: active" not in docker_info.stdout'

# # Labellisation des noeuds
# - hosts: managers, workers
#   serial: 1
#   tasks:
#     - name: Label nodes
#       shell: >
#         docker node update --label-add {{ item }}=true {{ inventory_hostname }}
#       when: "item != 'all_groups'"
#       with_items:
#         - "{{ group_names }}"
#       delegate_to: "{{ groups['managers'][0] }}"
#       tags:
#         - label


# create overlay networks for infra swarm nodes
- hosts: managers[0]
  tasks:
    - name: Create overlay networks
      community.docker.docker_network:
        driver: overlay
        attachable: true
        name:  core-infra
        state: present