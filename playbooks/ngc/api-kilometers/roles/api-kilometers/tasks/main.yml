
  # lOAD PROJECT ENV VARS

- name: load vars to generate docker-compose file's
  include_vars:
    file: "{{ PROJECT_VARS_FILE }}"
    name: APP_ENV

- name: "Create a directory {{ PROJECT_NAME }} on gluster volume for all nodes"
  file:
    path: "{{ GLUSTER_SHARE_PATH }}{{ item }}"
    state: directory
    owner: "{{ PROJECT_USER }}"
    group: "{{ PROJECT_USER }}"
  loop:
    - "{{ PROJECT_NAME }}"
    - "{{ PROJECT_NAME }}/media"
    - "{{ PROJECT_NAME }}/static"



- name: "Create a directory {{ PROJECT_NAME }} on gluster volume for manager nodes"
  file:
    path: "{{ GLUSTER_MANAGER_PATH }}{{ item }}"
    state: directory
    owner: "{{ PROJECT_USER }}"
    group: "{{ PROJECT_USER }}"
  loop:
    - "{{ PROJECT_NAME }}"

- name: Generate docker-compose.yml  files to master
  template:
    src: "./templates/docker-compose.yml"
    dest: "{{ GLUSTER_MANAGER_PATH }}{{ PROJECT_NAME }}/{{ PROJECT_NAME }}-compose.yml"
    owner: "{{ PROJECT_USER }}"
    group: "{{ PROJECT_USER }}"
    force: true



- name: Get info from a application service
  community.docker.docker_swarm_service_info:
    name: "{{ PROJECT_NAME }}_django"
  register: swarm_service_info

- set_fact: 
    env_vars_tmp: |
        {% for name, value in APP_ENV.items() %} --env-add {{ name }}="{{ value |trim |regex_replace ('!','\\!') }}" {% endfor %}
  when: swarm_service_info.exists


- name: force update service
  shell: "docker service update  {{ env_vars_tmp |trim }} --with-registry-auth --image babel.ngc-data.fr:8443/ngc/kilometers/api:{{ APP_VERSION }} {{ PROJECT_NAME }}_django"
  when: swarm_service_info.exists

  
- name: "deploy {{ PROJECT_NAME }} stack"
  community.docker.docker_stack:
    state: present
    name: "{{ PROJECT_NAME }}"
    prune: true
    with_registry_auth: yes
    compose:
      - "{{ GLUSTER_MANAGER_PATH }}{{ PROJECT_NAME }}/{{ PROJECT_NAME }}-compose.yml"
  when: swarm_service_info.exists == false