version: "3.4"
networks:
  api:
    external:
      name: kilometers-api
  redis:
    external:
      name: kilometers-redis
services:
  nginx:
    depends_on:
      - web
    hostname: 'kilometers-api-nginx.{{.Node.Hostname}}'
    image: babel.ngc-data.fr:8443/common/docker/nginx:1.18.0
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: 10m
    networks:
      - api
    ports:
      - "8006:80"
    restart: always
    volumes:
      - type: bind
        source: ./vhost.conf
        target: /etc/nginx/conf.d/default.conf
        volume:
          nocopy: true
      - type: bind
        source: ../static
        target: /var/www/public/static
        volume:
          nocopy: true
  web:
    command: |
      bash -c "while ! nc -w 1 -z 10.66.30.10 5432; do sleep 1; done; \
              while ! nc -w 1 -z 10.66.30.23 3306; do sleep 1; done; \
              while ! nc -w 1 -z redis 6379; do sleep 1; done; \
              python manage.py migrate; \
              /usr/local/bin/gunicorn \
                --bind=0.0.0.0:8000 \
                --pid=/home/ngc/run/gunicorn.pid \
                --user=ngc \
                --workers=4 \
                --worker-class=gevent \
                --worker-connections=1000 \
                --user=ngc \
                project.wsgi:application"
    hostname: 'kilometers-api-web.{{.Node.Hostname}}'
    env_file:
      - .env
    image: babel.ngc-data.fr:8443/ngc/kilometers/api:<VERSION>
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: 10m
    depends_on:
      - redis
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 500M

    ports:
      - "8000:8000"
    networks:
      - redis
      - api
    restart: always
    volumes:
      - "../static:/home/ngc/code/static"
  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - data:/home/docker/data
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: 10m
    command: redis-server --appendonly yes
    networks:
      - redis
volumes:
  data: